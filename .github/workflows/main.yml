name: CI/CD Pipeline for .NET App on Azure with Docker Compose

on:
  push:
    branches:
      - main
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Log in to Azure
      run: |
        echo "${{secrets.AZURE_CREDENTIALS}}" > azure_credentials.json
        az login --service-principal --username ${{secrets.AZURE_CLIENT_ID}} --password ${{secrets.AZURE_CLIENT_SECRET}} --tenant ${{secrets.AZURE_TENANT_ID}}
    
    - name: Log in to ACR
      run: |
        az acr login --name ${{secrets.ACR_NAME}}
      env:
          AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
    - name: Build and push image to ACR
      run: |
        docker build -t ${{secrets.ACR_NAME}}.azurecr.io/samples/tochinicky/bookifyapi:latest -f src/Bookify.Api/Dockerfile .
        docker push ${{secrets.ACR_NAME}}.azurecr.io/samples/tochinicky/bookifyapi:latest
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ADMIN_CLIENT_SECRET: ${{ secrets.ADMIN_CLIENT_SECRET }}
        AUTH_CLIENT_SECRET: ${{ secrets.AUTH_CLIENT_SECRET }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Log in to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Log in to Azure
      run: |
        echo "${{secrets.AZURE_CREDENTIALS}}" > azure_credentials.json
        az login --service-principal --username ${{secrets.AZURE_CLIENT_ID}} --password ${{secrets.AZURE_CLIENT_SECRET}} --tenant ${{secrets.AZURE_TENANT_ID}}

    # - name: Deploy to Azure Web App
    #   uses: azure/webapps-deploy@v2
    #   with:
    #     app-name: 'bookify'
    #     publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
    #     images: |
    #       "${{secrets.ACR_NAME}}.azurecr.io/samples/tochinicky/bookifyapi:latest" docker-compose-file: './docker-compose.prod.yml'
    #     slot-name: production
    - name: Deploy to Azure Web App using Docker Compose
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'bookify'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        docker-compose-file: './docker-compose.prod.yml'
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        CACHE_CONNECTION: ${{ secrets.CACHE_CONNECTION }}
